/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mochilagui;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Miguel Vidal
 */
public class Finestra extends javax.swing.JFrame {

    int N;      // Para recorrer el array de objetos
    private Objetos[] items = new Objetos[N];   //Aqui se guardan los objetos
    int benef_final = 0;
    int capacitat;
    int solsVal;
    private int objectes;

    String SObjectes = "";
    String SSol = "";
    String SBeneficio = "";

    Icon icono = new ImageIcon("imatges\\icono.png");

    /**
     * Creates new form Finestra
     */
    public Finestra() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        JTFPes = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        JTFValor = new javax.swing.JTextField();
        CrearObjecte = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        JTFPesmaxim = new javax.swing.JTextField();
        Calcular = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        JLObjectes = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Reset = new javax.swing.JMenuItem();
        Sortir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Pes objecte");

        jLabel2.setText("Valor objecte");

        CrearObjecte.setText("Crear objecte");
        CrearObjecte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CrearObjecteActionPerformed(evt);
            }
        });

        jLabel3.setText("Pes máxim");

        Calcular.setText("Calcular");
        Calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalcularActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Objectes creats: ");

        JLObjectes.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        JLObjectes.setText("0");

        jMenu1.setText("Opcions");

        Reset.setText("Reset");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });
        jMenu1.add(Reset);

        Sortir.setText("Sortir");
        Sortir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortirActionPerformed(evt);
            }
        });
        jMenu1.add(Sortir);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(JTFPes, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(JTFValor, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(Calcular))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(CrearObjecte))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JLObjectes))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(28, 28, 28)
                                .addComponent(JTFPesmaxim, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(JTFPes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(JTFValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(CrearObjecte)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(JLObjectes))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(JTFPesmaxim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(Calcular)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SortirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SortirActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed

        JTFPes.setText("");
        JTFPesmaxim.setText("");
        JTFValor.setText("");

    }//GEN-LAST:event_ResetActionPerformed

    private void CrearObjecteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CrearObjecteActionPerformed

        if ((JTFPes.getText().isEmpty()) || (JTFValor.getText().isEmpty())) {
            JOptionPane.showMessageDialog(this, "Introduce los datos requeridos", "Campos sin rellenar", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                int a = Integer.parseInt(JTFPes.getText());
                int b = Integer.parseInt(JTFValor.getText());
                objectes = Integer.parseInt(JLObjectes.getText());
                objectes++;
                String paraimprimir = Integer.toString(objectes);
                JLObjectes.setText(paraimprimir);
                Objetos o = new Objetos(a, b);
                addObjeto(o);
                System.out.println("Objeto numero " + objectes + " -> " + o);
                SObjectes += o;
                SObjectes += "\n";
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,"No se ha introducido un numero","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        JTFValor.setText("");
        JTFPes.setText("");

    }//GEN-LAST:event_CrearObjecteActionPerformed

    private void CalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalcularActionPerformed

        if (JTFPesmaxim.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Introduce los datos requeridos", "Campos sin rellenar", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                capacitat = Integer.parseInt(JTFPesmaxim.getText());
                N = items.length;

                int[][] mochilaActual = new int[100][N];
                int[][] mochilaFinal = new int[100][N];
                mochila(mochilaActual, 0, mochilaFinal, 0);
                System.out.println("*****Combinaciones óptimas*****");
                for (int i = 0; i < N; i++) {
                    if (solsVal != 0) {
                        System.out.println("\nCombinacion " + (i + 1) + ":");
                        SSol += "Combinacion " + i + "\n";
                        for (int j = 0; j < N; j++) {
                            if (mochilaFinal[i][j] == 1) {
                                System.out.println(items[j]);
                                SSol += items[j].toString() + "\n";
                            }
                        }
                        solsVal--;
                    }

                }
                System.out.println("\nBeneficio maximo es de: " + benef_final);
                SBeneficio += "El beneficio total es de " + benef_final;
                SSol += SBeneficio;
                JOptionPane.showMessageDialog(this, SSol, "Solució", JOptionPane.INFORMATION_MESSAGE, icono);
                SSol = "";
                SBeneficio = "";
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se ha introducido ningún numero", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_CalcularActionPerformed

    public void addObjeto(Objetos o) {
        int i = items.length;
        Objetos[] aux = new Objetos[i + 1];
        for (int j = 0; j < i; j++) {
            aux[j] = items[j];
        }
        aux[items.length] = o;
        items = aux;
        N = i + 1;
    }

    public void mochila(int[][] mochilaActual, int fase, int[][] mochilaFinal, int pesoFinal) {
        int i = 0;
        if (fase <= N - 1) {
            do {
                mochilaActual[0][fase] = i;
                if (todoCorrecto(mochilaActual) == true) {
                    if (fase != N - 1) {
                        mochila(mochilaActual, fase + 1, mochilaFinal, pesoFinal);
                    } else {
                        actualizarSolucion(mochilaActual, mochilaFinal, pesoFinal);
                    }
                }
                i++;
            } while (mochilaActual[0][fase] != 1);
            mochilaActual[0][fase] = -1;
        }
    }

    private boolean todoCorrecto(int[][] mochilaActual) {
        boolean pesoCorrecto = false;
        int peso = 0;
        for (int i = 0; i <= N - 1; i++) {
            if (mochilaActual[0][i] == 1) {
                peso += items[i].getPeso();
            }
        }
        if (peso <= capacitat) {
            pesoCorrecto = true;
        }
        return pesoCorrecto;
    }

    private void actualizarSolucion(int[][] mochilaActual, int[][] mochilaFinal, int pesoFinal) {
        int benef = 0;
        int peso = 0;
        for (int i = 0; i < N; i++) {
            if (mochilaActual[0][i] == 1) {
                benef += items[i].getBeneficio();
                peso += items[i].getPeso();
            }
        }
        if (benef > benef_final) {
            solsVal = 1;
            for (int i = 0; i < N; i++) {
                for (int j = 0; j < N; j++) {
                    if (i == 0) {
                        mochilaFinal[i][j] = mochilaActual[i][j];
                    } else {
                        mochilaFinal[i][j] = 0;
                    }
                }
            }
            pesoFinal = peso;
            benef_final = benef;
        } else if (benef == benef_final) {
            solsVal++;
            System.arraycopy(mochilaActual[0], 0, mochilaFinal[solsVal - 1], 0, N);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Finestra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Finestra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Calcular;
    private javax.swing.JButton CrearObjecte;
    private javax.swing.JLabel JLObjectes;
    private javax.swing.JTextField JTFPes;
    private javax.swing.JTextField JTFPesmaxim;
    private javax.swing.JTextField JTFValor;
    private javax.swing.JMenuItem Reset;
    private javax.swing.JMenuItem Sortir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
